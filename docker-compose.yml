services:
  # üêò Postgres service
  # Description: a powerful, open-source object-relational database system.
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -h localhost"]
      interval: 10s
      timeout: 3s
      retries: 5

  # üß† Redis service 
  # Description: a fast in-memory data structure store, used as a database, cache, and message broker.
  redis:
    image: redis:alpine
    container_name: airflow-redis
    restart: unless-stopped
    volumes:
      - redis_data:/redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  # üì¶ MinIO service
  minio:
    image: minio/minio
    container_name: airflow-minio
    ports:
      - "9000:9000"
      - "9090:9090"
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9090"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-file: "2"
        max-size: "5m"

  # ‚öôÔ∏è Airflow Initialization service
  # Description: initializes the Airflow database and sets up the environment.
  init:
    build: .
    image: airflow-dbt:v1.0-dev
    container_name: airflow-init
    env_file:
      - .env
    volumes:
      - ./dags:${AIRFLOW_HOME}/dags
      - ./dbt:${AIRFLOW_HOME}/logs
      - ./dbt:${AIRFLOW_HOME}/dbt
      - ./entrypoint.sh:/entrypoint.sh
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    depends_on:
      postgres:
        condition: service_healthy

  # üåê Airflow webserver service
  # Description: the web interface for Airflow, allowing users to monitor and manage workflows.
  webserver:
    image: airflow-dbt:v1.0-dev
    container_name: airflow-webserver
    restart: unless-stopped
    user: "${AIRFLOW_UID:-50000}:0"
    env_file:
      - .env
    volumes:
      - ./dags:${AIRFLOW_HOME}/dags
      - ./logs:${AIRFLOW_HOME}/logs
      - ./dbt:${AIRFLOW_HOME}/dbt
      - ./.env:${AIRFLOW_HOME}/.env:ro
    ports:
      - "8080:8080"
      - "8793:8793"
    depends_on:
      redis:
        condition: service_healthy
      init:
        condition: service_completed_successfully
    command: webserver --debug
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-file: "2"
        max-size: "5m"
  
  # üõ†Ô∏è Airflow worker service 1
  # Description: responsible for executing tasks in the Airflow DAGs.
  # It can be configured to use different executors (e.g., Celery, LocalExecutor).
  worker-1:
    image: airflow-dbt:v1.0-dev
    container_name: airflow-worker-1
    command: celery worker
    user: "${AIRFLOW_UID:-50000}:0"
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    volumes:
      - ./dags:${AIRFLOW_HOME}/dags
      - ./logs:${AIRFLOW_HOME}/logs
      - ./dbt:${AIRFLOW_HOME}/dbt
      - ./.env:${AIRFLOW_HOME}/.env:ro
    depends_on:
      webserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.00'
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-file: "2"
        max-size: "5m"
  
  # üõ†Ô∏è Airflow worker service 2
  worker-2:
    image: airflow-dbt:v1.0-dev
    container_name: airflow-worker-2
    command: celery worker
    user: "${AIRFLOW_UID:-50000}:0"
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    volumes:
      - ./dags:${AIRFLOW_HOME}/dags
      - ./logs:${AIRFLOW_HOME}/logs
      - ./dbt:${AIRFLOW_HOME}/dbt
      - ./.env:${AIRFLOW_HOME}/.env:ro
    depends_on:
      webserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.00'
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-file: "2"
        max-size: "5m"

  # ‚è∞ Airflow scheduler service
  # Description: responsible for scheduling tasks and managing the execution of DAGs.
  scheduler:
    image: airflow-dbt:v1.0-dev
    container_name: airflow-scheduler
    restart: unless-stopped
    command: scheduler
    user: "${AIRFLOW_UID:-50000}:0"
    env_file:
      - .env
    volumes:
      - ./dags:${AIRFLOW_HOME}/dags
      - ./logs:${AIRFLOW_HOME}/logs
      - ./dbt:${AIRFLOW_HOME}/dbt
      - ./.env:${AIRFLOW_HOME}/.env:ro
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-file: "2"
        max-size: "5m"
  
  # üîî Airflow triggerer service
  # Description: responsible for handling deferred tasks in Airflow.
  triggerer:
    image: airflow-dbt:v1.0-dev
    container_name: airflow-triggerer
    command: triggerer
    user: "${AIRFLOW_UID:-50000}:0"
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./dags:${AIRFLOW_HOME}/dags
      - ./logs:${AIRFLOW_HOME}/logs
      - ./dbt:${AIRFLOW_HOME}/dbt
      - ./.env:${AIRFLOW_HOME}/.env:ro
    depends_on:
      scheduler:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-file: "2"
        max-size: "5m"

  # üåº Flower service
  # Description: a web-based tool for monitoring and administrating Celery clusters.
  # It provides a real-time view of task progress and history.
  flower:
    image: mher/flower:latest
    container_name: airflow-flower
    command: celery flower
    restart: unless-stopped
    env_file:
      - .env
    environment:
      CELERY_RESULT_BACKEND: ${REDIS_URL}/0
      CELERY_BROKER_URL: ${REDIS_URL}/0
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
      worker-1:
        condition: service_healthy
      worker-2:
        condition: service_healthy
      init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-file: "2"
        max-size: "5m"
  
  # üì¶ PgAdmin service
  # Description: a web-based tool for managing and administering PostgreSQL databases.
  pgadmin:
    image: dpage/pgadmin4:5.5
    env_file:
      - .env
    restart: on-failure
    container_name: airflow-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${PGADMIN_PORT}/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-file: "2"
        max-size: "5m"

  # üìä Metabase service
  # Description: an open-source business intelligence tool that allows users to visualize and analyze data.
  metabase:
    image: metabase/metabase:latest
    container_name: airflow-metabase
    hostname: metabase

    volumes:
      - metabase_data:/metabase3-data
    env_file:
      - .env
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      init:
        condition: service_completed_successfully
    environment:
      - MB_SITE_URL=http://localhost:3000
      - MB_REDIRECT_ALL_REQUESTS_TO_HTTPS=true
      - MB_JETTY_PORT=3000
      - MB_JETTY_HOST=0.0.0.0

      - MB_DB_MIGRATION_LOCATION=none
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=metabase
      - MB_DB_PORT=${POSTGRES_PORT}
      - MB_DB_USER=${POSTGRES_USER}
      - MB_DB_PASS=${POSTGRES_PASSWORD}
      - MB_DB_HOST=${POSTGRES_HOST}
      - MB_AUTOMIGRATE=true
  
    healthcheck:
      test: curl --fail -I http://127.0.0.1:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5

volumes:
  postgres-db-volume:
  redis_data:
  metabase_data:
  pgadmin-data:
  minio_data: