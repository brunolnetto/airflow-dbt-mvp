  services:
    postgres:
      image: postgres:13
      container_name: airflow-postgres
      restart: unless-stopped
      env_file:
        - .env
      environment:
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      volumes:
        - postgres-db-volume:/var/lib/postgresql/data
      healthcheck:
        test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
        interval: 10s
        timeout: 3s
        retries: 3

    redis:
      image: redis:latest
      container_name: airflow-redis
      restart: unless-stopped
      healthcheck:
        test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

    init:
      build: .
      container_name: airflow-init
      env_file:
        - .env
      environment:
        AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
        AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${POSTGRES_URI}
        AIRFLOW__WEBSERVER__SECRET_KEY: ${SECRET_KEY}
      volumes:
        - ./dags:${AIRFLOW_HOME}/dags
        - ./dbt:${AIRFLOW_HOME}/dbt
        - ./entrypoint.sh:/entrypoint.sh
      entrypoint: ["/bin/bash", "/entrypoint.sh"]
      depends_on:
        postgres:
          condition: service_healthy

    webserver:
      build: .
      container_name: airflow-webserver
      restart: unless-stopped
      env_file:
        - .env
      environment:
        AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
        AIRFLOW__CORE__EXECUTOR: CeleryExecutor
        AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
        AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${POSTGRES_URI}
        AIRFLOW__WEBSERVER__SECRET_KEY: ${SECRET_KEY}
        DBT_PROFILES_DIR: "${AIRFLOW_HOME}/dbt_profiles"
      volumes:
        - ./dags:${AIRFLOW_HOME}/dags
        - ./dbt:${AIRFLOW_HOME}/dbt
      ports:
        - "8080:8080"
      depends_on:
        postgres:
          condition: service_healthy
        redis:
          condition: service_healthy
        airflow-init:
          condition: service_completed_successfully
      command: webserver
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s

    scheduler:
      build: .
      container_name: airflow-scheduler
      restart: unless-stopped
      env_file:
        - .env
      environment:
        AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
        AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
        AIRFLOW__CORE__EXECUTOR: CeleryExecutor
        AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
        AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${POSTGRES_URI}
        AIRFLOW__WEBSERVER__SECRET_KEY: ${SECRET_KEY}
        DBT_PROFILES_DIR: "${AIRFLOW_HOME}/dbt_profiles"
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      volumes:
        - ./dags:${AIRFLOW_HOME}/dags
        - ./dbt:${AIRFLOW_HOME}/dbt
      postgres:
          condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      command: scheduler
    
    triggerer:
      build: .
      container_name: airflow-triggerer
      restart: unless-stopped
      env_file:
        - .env
      command: triggerer
      environment:
        AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
        AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
        AIRFLOW__CORE__EXECUTOR: CeleryExecutor
        AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
        AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${POSTGRES_URI}
        AIRFLOW__WEBSERVER__SECRET_KEY: ${SECRET_KEY}
        DBT_PROFILES_DIR: "${AIRFLOW_HOME}/dbt_profiles"
      healthcheck:
        test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      depends_on:
        postgres:
          condition: service_healthy
        redis:
          condition: service_healthy
        airflow-init:
          condition: service_completed_successfully

    worker:
      build: .
      container_name: airflow-worker
      restart: unless-stopped
      env_file:
        - .env
      environment:
        AIRFLOW__CORE__EXECUTOR: CeleryExecutor
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${POSTGRES_URI}
        AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
        AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      volumes:
        - ./dags:${AIRFLOW_HOME}/dags
        - ./dbt:${AIRFLOW_HOME}/dbt
      depends_on:
        postgres:
          condition: service_healthy
        redis:
          condition: service_healthy
      command: celery worker
      healthcheck:
        test:
          - "CMD-SHELL"
          - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s

    flower:
      image: mher/flower:latest
      container_name: airflow-flower
      restart: unless-stopped
      env_file:
        - .env
      environment:
        CELERY_RESULT_BACKEND: redis://redis:6379/0
        CELERY_BROKER_URL: redis://redis:6379/0
      ports:
        - "5555:5555"
      depends_on:
        redis:
          condition: service_healthy
        webserver:
          condition: service_healthy
        init:
          condition: service_completed_successfully
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      command: celery flower

  volumes:
    postgres-db-volume:

